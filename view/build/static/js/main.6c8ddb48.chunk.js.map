{"version":3,"sources":["Dashboard.js","HealthCheck.js","ServerInfo.js","App.js","reportWebVitals.js","index.js"],"names":["useRowStyles","makeStyles","root","borderBottom","Row","props","id","nodes","history","React","useState","open","setOpen","classes","words","split","serviceId","tag","Fragment","TableRow","className","TableCell","IconButton","aria-label","size","onClick","component","scope","align","length","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","Table","TableHead","TableBody","map","node","j","address","port","k","console","log","push","pathname","state","data","handleCheck","handleInfo","Dashboard","wait","services","setServices","error","setError","loading","setLoading","headers","useEffect","abortController","AbortController","a","fetch","signal","response","ok","json","aborted","fetchData","abort","CircularProgress","JSON","stringify","TableContainer","Paper","Object","keys","i","HealthCheck","location","check","setCheck","url","ServerInfo","info","setInfo","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c8ddb48.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport CloudDoneIcon from '@material-ui/icons/CloudDone';\nimport HelpIcon from '@material-ui/icons/Help';\nimport './Dashboard.css';\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n});\n\nfunction Dashboard(props) {\n    console.log(props);\n    const [services, setServices] = useState();\n    const [error, setError] = useState();\n    const [loading, setLoading] = useState(true);\n\n    const url = '/services';\n    const headers = {};\n\n    useEffect(() => {\n        const abortController = new AbortController();\n        const fetchData = async () => {\n            setLoading(true);\n            try {\n                const response = await fetch(url, { headers, signal: abortController.signal });\n                if (!response.ok) {\n                    const data = await response.json();\n                    console.log(data);\n                    setError(data);\n                    setLoading(false);\n                } else {\n                    const data = await response.json();\n                    console.log(data);\n                    setServices(data);\n                    setLoading(false);\n                }\n            } catch (e) {\n                if (!abortController.signal.aborted) {\n                    console.log(e);\n                    setLoading(false);\n                }\n            }\n        };\n\n        fetchData();\n\n        return () => {\n            abortController.abort();\n        };\n    }, []);\n\n    let wait;\n    console.log(loading, error, services);\n\n    if (loading) {\n        console.log('display circular progress');\n        wait = (<div><CircularProgress /></div>);\n    } else if (error) {\n        console.log('display error');\n        wait = (\n            <div>\n                <pre>{JSON.stringify(error, null, 2)}</pre>\n            </div>\n        )\n    } else if (services) {\n        console.log('display services = ', services);\n        wait = (\n            <TableContainer component={Paper}>\n                <Table aria-label=\"collapsible table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell />\n                            <TableCell>Service Id</TableCell>\n                            <TableCell>Environment Tag</TableCell>\n                            <TableCell align=\"right\">Number of Nodes</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {Object.keys(services).map((id, i) => (\n                            <Row key={i} history={props.history} id={id} nodes={services[id]} />\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        )\n    }\n    return (\n        <div className=\"App\">\n            {wait}\n        </div>\n    );\n}\n\nfunction Row(props) {\n    const { id, nodes, history } = props;\n    const [open, setOpen] = React.useState(false);\n    const classes = useRowStyles();\n    const words = id.split('|');\n    const serviceId = words[0];\n    const tag = words[1];\n\n    const handleCheck = (node) => {\n        const k = id + ':' + node.address + ':' + node.port;\n        console.log(node, k);\n        history.push({ pathname: '/check', state: { data: { id: k } } });\n    }\n\n    const handleInfo = (node) => {\n        const k = node.address + ':' + node.port;\n        console.log(node, k);\n        history.push({ pathname: '/info', state: { data: { node: k } } });\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow className={classes.root}>\n                <TableCell>\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {serviceId}\n                </TableCell>\n                <TableCell>{tag}</TableCell>\n                <TableCell align=\"right\">{nodes.length}</TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box margin={1}>\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                Nodes\n              </Typography>\n                            <Table size=\"small\" aria-label=\"purchases\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Address</TableCell>\n                                        <TableCell align=\"right\">Port</TableCell>\n                                        <TableCell align=\"right\">Status Check</TableCell>\n                                        <TableCell align=\"right\">Server Info</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {nodes.map((node, j) => (\n                                        <TableRow key={j}>\n                                            <TableCell component=\"th\" scope=\"row\">\n                                                {node.address}\n                                            </TableCell>\n                                            <TableCell align=\"right\">{node.port}</TableCell>\n                                            <TableCell align=\"right\"><CloudDoneIcon onClick={() => handleCheck(node)} /></TableCell>\n                                            <TableCell align=\"right\"><HelpIcon onClick={() => handleInfo(node)} /></TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\n\nexport default Dashboard;\n","import React, { useEffect, useState } from \"react\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nexport default function HealthCheck(props) {\n    console.log(props.location.state.data);\n    const id = props.location.state.data.id;\n\n    const [check, setCheck] = useState();\n    const [error, setError] = useState();\n    const [loading, setLoading] = useState(true);\n\n    const url = '/services/check/' + id;\n    const headers = {};\n    useEffect(() => {\n        const abortController = new AbortController();\n        const fetchData = async () => {\n            setLoading(true);\n            try {\n                const response = await fetch(url, { headers, signal: abortController.signal });\n                if (!response.ok) {\n                    const data = await response.json();\n                    console.log(data);\n                    setError(data);\n                    setLoading(false);\n                } else {\n                    const data = await response.json();\n                    console.log(data);\n                    setCheck(data);\n                    setLoading(false);\n                }\n            } catch (e) {\n                if (!abortController.signal.aborted) {\n                    console.log(e);\n                    setLoading(false);\n                }\n            }\n        };\n\n        fetchData();\n\n        return () => {\n            abortController.abort();\n        };\n    }, []);\n\n    console.log(loading, check, error);\n\n    let wait;\n    if (loading) {\n        wait = <div><CircularProgress /></div>;\n    } else {\n        wait = (\n            <pre>{check ? JSON.stringify(check, null, 2) : error}</pre>\n        )\n    }\n\n    return (\n        <div>\n            {wait}\n        </div>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nexport default function ServerInfo(props) {\n    console.log(props);\n    const node = props.location.state.data.node;\n\n    const [info, setInfo] = useState();\n    const [error, setError] = useState();\n    const [loading, setLoading] = useState(true);\n      \n    const url = '/services/info/' + node;\n    const headers = {};\n    useEffect(() => {\n        const abortController = new AbortController();\n        const fetchData = async () => {\n            setLoading(true);\n            try {\n                const response = await fetch(url, { headers, signal: abortController.signal });\n                if (!response.ok) {\n                    const data = await response.json();\n                    console.log(data);\n                    setError(data);\n                    setLoading(false);\n                } else {\n                    const data = await response.json();\n                    console.log(data);\n                    setInfo(data);\n                    setLoading(false);\n                }\n            } catch (e) {\n                if (!abortController.signal.aborted) {\n                    console.log(e);\n                    setLoading(false);\n                }\n            }\n        };\n\n        fetchData();\n\n        return () => {\n            abortController.abort();\n        };\n    }, []);\n\n    console.log(loading, info, error);\n    let wait;\n    if (loading) {\n        wait = <div><CircularProgress /></div>;\n    } else {\n        wait = (\n            <pre>{info ? JSON.stringify(info, null, 2) : error}</pre>\n        )\n    }\n    return (\n        <div>\n            {wait}\n        </div>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport HealthCheck from \"./HealthCheck\";\nimport ServerInfo from \"./ServerInfo\";\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Dashboard} />\n        <Route path=\"/check\" component={HealthCheck} />\n        <Route path=\"/info\" component={ServerInfo} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}