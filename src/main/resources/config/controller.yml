# Cluster mode that uses Kafka as backend for high availability
clusterMode: ${controller.clusterMode:false}
# The portal event topic for Kafka cluster used for the cluster mode
topic: ${controller.topic:portal-event}
# If the OAuth 2.0 implementation does not support long-lived token, we need to set up the controller to get a jwt token
# dynamically and get another one before the previous one is expired. when this flag is true, the boostrapToken will not
# be used. Please make sure that the client.yml is configured for client credentials flow with OAuth 2.0 provider access.
dynamicToken: ${controller.dynamicToken:false}
# Bootstrap token used by light-controller to call each service health and server info endpoints.
# This is a client credentials token without user info. And it is created with a special tool only available to customers.
bootstrapToken: ${controller.bootstrapToken:eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTkxNDc3Nzc0NCwianRpIjoiMkFIN0RUY1lPWWN6VHBZTU5wb3ZoQSIsImlhdCI6MTU5OTQxNzc0NCwibmJmIjoxNTk5NDE3NjI0LCJ2ZXJzaW9uIjoiMS4wIiwiY2xpZW50X2lkIjoiOGY2Njg1MGQtMTZhMi00ZTgxLTk3N2ItMTVhMjQ4YTllZDdkIiwic2NvcGUiOlsicG9ydGFsLnIiLCJwb3J0YWwudyJdfQ.Z_YekhJ4-iCjpC0yk0iG6bmVQkHToeCcYApTAf31S_lrSt3BWi-FJpMDWMOTlPuENWvHPlpPx5Vz6MW9miJaEIdsjnhY6x3O0fNcGoUnbPrYy4-4yeTSTuzMOmtK8MmBoVu18i2BExOaqtPBdMzmi4QTv0kULPKxZJaqXqSS6_2jNrgvcqlRjjrt_WKmcWAHDgpQpdqBlOQ_4VhNtY-BE1WoVNpEljJIulPNlcMatQi_liQ3HpB2R90tU-mXotseVnRVLy_lTc5VLkFBehBbD2_GzEIa4eM_cGGDRKDEH7qJlrBWFqDCq9rLasNeVjMuc41y2K9NYTERkIXsTDJOxw}
# Client Timeout in millisecond. This is used for HTTP health check, server info and logger retrieval and updates.
clientTimeout: ${controller.clientTimeout:2000}
# Light-scheduler task definition topic for health check task scheduling.
schedulerTopic: ${controller.schedulerTopic:light-scheduler}
# Light-scheduler health check task topic that needs to processed with the health check streams.
healthCheckTopic: ${controller.healthCheckTopic:controller-health-check}
# The service registration streams application.id
registryApplicationId: ${controller.registryApplicationId:registry}
# The health check streams application.id
healthApplicationId: ${controller.healthApplicationId:health}
