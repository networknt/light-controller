openapi: 3.0.2
info:
  title: Control Panel - OpenAPI 3.0
  description: |-
    All light-4j services can register here during startup and deregister during the shutdown. It ensures that the control panel has a snapshot of running services all the time. The control panel also sends health check requests to each service continuously to ensure its healthy and server info request to assist the service certification. With the information above, this service can serve as a global discovery for service to service invocations. 
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: stevehu@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  - url: 'https://lightapi.net'
paths:
  '/services':
    post:
      summary: Add a new service with opitonal health checks
      description: Register a service during its startup
      operationId: register
      requestBody:
        description: Register a service with optional health checks
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: Invalid Service Register Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      security:
        - portal_auth:
            - 'portal.w'
    delete:
      summary: Remove a service and its health checks from the registry
      description: Deregister a service during its shutdown
      operationId: deregister
      parameters:
        - name: serviceId
          in: query
          description: ID of the service
          required: true
          schema:
            type: string
        - name: tag
          in: query
          description: Return only nodes with the tag
          required: false
          schema:
            type: string
        - name: address
          in: query
          description: IP address of the node
          required: true
          schema:
            type: string
        - name: port
          in: query
          description: Port number of the node
          required: true
          schema:
            type: integer
      
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: Invalid Service Register Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      security:
        - portal_auth:
            - 'portal.w'
    get:
      summary: Query all healthy services or one with a serviceId and an optional tag
      description: Returns a list of services or only one
      operationId: getHealthService
      parameters:
        - name: serviceId
          in: query
          description: ID of the service
          required: false
          schema:
            type: string
        - name: passing
          in: query
          description: Return only nodes with passing state
          required: false
          schema:
            type: boolean
        - name: tag
          in: query
          description: Return only nodes with the tag
          required: false
          schema:
            type: string
        - name: wait
          in: query
          description: Blocking query wait period
          required: false
          schema:
            type: string
        - name: index
          in: query
          description: Last query index returned from last query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      security:
        - portal_auth:
            - 'portal.r'
            - 'portal.w'
  '/services/check':
    put:
      summary: TTL type check to set the status of the check to pass or fail
      description: TTL check to from the service for pass or not
      operationId: checkStatus
      requestBody:
        description: TTL check to notify if the service is pass or not
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckStatus'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: Invalid Service Register Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      security:
        - portal_auth:
            - 'portal.w'
  '/services/info/{serviceId}':
    get:
      summary: Query service info by serviceId
      description: Returns a service info object
      operationId: getServiceInfo
      parameters:
        - name: serviceId
          in: path
          description: ID of the service
          required: true
          schema:
            type: string
        - name: tag
          in: query
          description: Return only nodes with the tag
          required: false
          schema:
            type: string
        - name: passing
          in: query
          description: Return only nodes with passing state
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      security:
        - portal_auth:
            - 'portal.r'
            - 'portal.w'
components:
  schemas:
    Service:
      type: object
      properties:
        serviceId:
          type: string
          description: a unique ID for the service across the organization.
          example: com.networknt.petstore.v1
        name:
          type: string
          description: a logical name of the service.
          example: com.networknt.petstore.v1
        tag:
          type: string
          description: a list of tags to assign to the service.
        address:
          type: string
          description: The address of the service.
        port:
          type: integer
          description: The port number of the service
          example: 8080
        check:
          $ref: '#/components/schemas/Check'
      required:
        - serviceId
        - address
        - port  
    Check:
      type: object
      properties:
        name:
          type: string
          description: The name of the check
        id:
          type: string
          description: A unique ID for this check on the node
        interval:
          type: string
          description: The frequency at which to run this check
        notes:
          type: string
          description: Arbitrary information for humans. 
        deregisterCriticalServiceAfter:
          type: string
          description: Check associated with a service should deregister after this time
        http: 
          type: string
          description: An HTTP check to perform a GET request against the value of HTTP every Interval. 
        tlsSkipVerify: 
          type: boolean
          description: If the certificate for an HTTPS check should not be verified.
        ttl: 
          type: string
          description: A TTL check and the TTL endpoint must be used periodically to update the state of the check
      required:
        - id
        - deregisterCriticalServiceAfter
    CheckStatus:
      type: object
      properties:
        id:
          type: string
          description: A unique ID for the check with serviceId, address and port combination
        pass:
          type: boolean
          description: If the check is passed or failed
    Status:
      type: object
      properties:
        statusCode:
          type: integer
        code:
          type: string
        message:
          type: string
        description:
          type: string
        severity:
          type: string
      required:
        - statusCode
        - code
        - message
        - description

  securitySchemes:
    portal_auth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://lightapi.net/token'
          scopes:
            'portal.w': update control panel
            'portal.r': query control panel
